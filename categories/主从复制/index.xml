<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>主从复制 on 吴宏伟✊</title>
        <link>https://ydmy71.github.io/hugo-whw/categories/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link>
        <description>Recent content in 主从复制 on 吴宏伟✊</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>吴宏伟</copyright>
        <lastBuildDate>Sat, 23 Mar 2024 17:34:23 +0800</lastBuildDate><atom:link href="https://ydmy71.github.io/hugo-whw/categories/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis</title>
        <link>https://ydmy71.github.io/hugo-whw/p/redis/</link>
        <pubDate>Sat, 23 Mar 2024 17:34:23 +0800</pubDate>
        
        <guid>https://ydmy71.github.io/hugo-whw/p/redis/</guid>
        <description>&lt;img src="https://ydmy71.github.io/hugo-whw/p/redis/redis.jpg" alt="Featured image of post Redis" /&gt;&lt;h2 id=&#34;redis&#34;&gt;Redis
&lt;/h2&gt;&lt;h3 id=&#34;redis-1&#34;&gt;Redis
&lt;/h3&gt;&lt;p&gt;首先，Redis是一个开源基于内存的高性能键值对存储系统&lt;/br&gt;
1 高性能：redis数据存储在内存中，因此可以能够极快的读写操作，它采用单线程模型和异步I/O,避免了多线程的竞争和阻塞，从而达到了非常高的性能。&lt;/br&gt;
2 数据结构多样性：redis提供了多种数据类型来支持不同的业务场景&lt;/br&gt;
3持久化支持：redis提高了两种持久化方式，即快照和日志追加。快照方式将Redis内存数据以二进制格式写入磁盘，而AOF则提供追加记录Redis的操作命令来实现持久化。&lt;/br&gt;
4发布订阅：Redis支持发布订阅模式，可以用作消息代理，发布者将消息发送到指定的频道，订阅者则可以接收和处理这些消息。&lt;/br&gt;
5.分布式缓存：redis可以通过主从复制和分片来实现数据分布式存储和高可用性。主从复制可以将数据复制多个从节点，实现读写分离和数据备份。而分片则可以将数据分布在多个Redis节点上，实现横向扩展和负载均衡&lt;/br&gt;
6事务支持 和mysql事务一样&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis事务和mysql事务的原子性区别&#34;&gt;Redis事务和MySQL事务的原子性区别
&lt;/h3&gt;&lt;p&gt;定义与实现&lt;/br&gt;
Redis事务是一组命令集合，若有语法错误则整个事务放弃，运行时错误只放弃出错命令，如果出现运行时错误（例如对一个字符串进行算术运算），Redis只会放弃出现的错误的命令，而其他命令会继续执行。&lt;/br&gt;
Mysql事务的原子性 ，MySQL通过redo log和 undo log来实现事务的原子性，当事务开始时，Mysql会记录所有对数据修改的操作到redo og中，同时也会记录反向操作到undo log中，如果事务执行成功，redo log中的记录会被持久化到磁盘，undo log中的记录可以用于回滚事务，如果事务执行失败，Mysql可以根据undo log中的记录将数据恢复到事务开始之前的状态。&lt;/br&gt;
应用场景和特点&lt;/br&gt;
Redis事务用于保证一组命令顺序执行及一定一致性要求的场景，执行是单线程但不能保证绝对一致性&lt;/br&gt;
Mysql事务用于数据一致性要求高的业务场景，支持多种隔离级别，可通过锁机制保证一致性&lt;/br&gt;
性能与可靠性&lt;/br&gt;
性能上，Redis事务执行快，但复杂操作可能影响性能，Mysql事务因磁盘I/O和锁机制性能相对较低但可优化。&lt;/br&gt;
可靠性上，Redis事务可靠性低，可配置持久化策略提高，Mysql事务可靠性较高，通过日志和回滚保证数据完整。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis源代码布局&#34;&gt;Redis源代码布局
&lt;/h3&gt;&lt;p&gt;src：包含了一些C语言编写的Redis实现&lt;/br&gt;
tests：包含Tcl中实现的单元测试&lt;/br&gt;
deps：包含Redis使用的库编译 Redis 所需的一切都在此目录中;您的系统只需要提供 、 POSIX 兼容接口和 C 编译器。值得注意的是，包含 的副本，它是 Linux 下 Redis 的默认分配器。
sever.h&lt;/br&gt;
定义客户端的数据结构&lt;/br&gt;
struct client {&lt;/br&gt;
int fd;//客户端套接字文件描述符&lt;/br&gt;
sds querybuf;//累积来自客户端的请求，这些请求由 Redis 服务器根据 Redis 协议进行解析，并通过调用客户端正在执行的命令的实现来执行。&lt;/br&gt;
int argc;//填充客户端执行的命令，以便实现给定Redis命令的函数可以读取参数   &lt;/br&gt;
robj **argv;&lt;/br&gt;
redisDb *db;&lt;/br&gt;
int flags;&lt;/br&gt;
list *reply;是动态和静态缓冲区，用于累计服务器发送到客户端的回复，一旦文件描述符可写，这些缓冲区就以增量的方式写入套接字    &lt;/br&gt;
// &amp;hellip; many other fields &amp;hellip;&lt;/br&gt;
char buf[PROTO_REPLY_CHUNK_BYTES];&lt;/br&gt;
}&lt;/p&gt;
&lt;h3 id=&#34;redis支持的数据类型&#34;&gt;Redis支持的数据类型
&lt;/h3&gt;&lt;h4 id=&#34;1string&#34;&gt;1.string
&lt;/h4&gt;&lt;p&gt;底层的数据结构为int和SDS&lt;/br&gt;
SDS不仅可以保存文本数据，还可以保存二进制数据。&lt;/br&gt;
SDS获取字符串长度的时间复杂度是O(1)&lt;/br&gt;
SDS结构&lt;/br&gt;
Redis的SDS API是安全的，拼接字符串不会造成缓冲区溢出。&lt;/br&gt;
场景：session存储&lt;/br&gt;
常规计数 例如文章的阅读量&lt;/br&gt;
SET key value&lt;/br&gt;
GET 获取&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;2list&#34;&gt;2.list
&lt;/h4&gt;&lt;p&gt;列表，在Redis中的list在底层实现上并不是数组，而是压缩列表或者双向链表，也就是说对于一个具有很多个元素的list来说，在头部和尾部插入一个新元素时间复杂度都是常数级别的。如果列表的个数小于512个并且每个元素的值都小于64字节。&lt;/br&gt;
场景：分页查询&lt;/br&gt;
LPUSH key value&lt;/br&gt;
LRANGE 获取指定范围内的元素&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;3set&#34;&gt;3.set
&lt;/h4&gt;&lt;p&gt;如果集合中的元素都是整数并且元素小于512个，redis会使用整数集合作为底层数据结构。如果不满足的画会使用哈希表作为底层数据结构。无序
场景：兴趣标签 实时的在线状态&lt;/br&gt;
SADD  key value&lt;/br&gt;
SMEMBERS&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;4zset&#34;&gt;4.zset
&lt;/h4&gt;&lt;p&gt;有序集合，如果有序集合的元素个数小于128个，并且每个元素的值小于64字节，redis会使用压缩列表作为底层数据结构。&lt;/br&gt;
场景：排行榜&lt;/br&gt;
ZADD&lt;/br&gt;
ZRANGE 获取范围内的成员&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;5hash&#34;&gt;5.hash
&lt;/h4&gt;&lt;p&gt;哈希存储的就是字符串和字符串值之间的映射。&lt;/br&gt;
如果哈希类型元素少于512个所有制小于64字节。redis会使用压缩列表作为底层数据结构。不符合则用哈希表&lt;/br&gt;
HMSET key value key value&lt;/br&gt;
HGETALL 获取&lt;/br&gt;
场景：用户信息&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis缓存&#34;&gt;Redis缓存
&lt;/h3&gt;&lt;p&gt;用户的数据一般都是存储在数据库上的，请求的数量一上来，数据库会奔溃，所以要用Redis作为缓存层，会给Redis里的数据设置过期时间。当缓存数据过期后，用户访问的数据如果不在缓存里，业务系统需要重新生成缓存。&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存雪崩&#34;&gt;缓存雪崩
&lt;/h4&gt;&lt;p&gt;当大量缓存数据在同一时间过期或者Redis故障宕机，此时有大量的用户请求时，都无法在Redis中处理，于是直接访问数据库，导致压力骤增。
解决办法&lt;/br&gt;
1 均匀的设置过期时间，给这些数据的过期时间加上一个随机数.&lt;/br&gt;
2 互斥锁&lt;/br&gt;
如果发现访问的数据不在Redis里，就加个互斥锁，保证同一时间内只有一个请求来构建缓存，记得要设置锁的超时时间。&lt;/br&gt;
3.后台更新缓存，可以看作缓存永久有效，并将更新缓存的工作交由后台线程固定刷新&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存击穿&#34;&gt;缓存击穿
&lt;/h4&gt;&lt;p&gt;如果缓存中的某个热点数据过期了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库。&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存穿透&#34;&gt;缓存穿透
&lt;/h4&gt;&lt;p&gt;当用户访问的数据，即不在缓存中，也不在数据库中，导致请求在访问缓存时，发现缓存缺失，在访问数据库的时候，数据库中也没有，导致数据库的压力骤增。首先是业务误操作，和黑客恶意攻击。&lt;/br&gt;
解决方案&lt;/br&gt;
1.非法请求的限制&lt;/br&gt;
2.缓存空值或者默认值&lt;/br&gt;
3.使用布隆过滤器来快速判断数据是否存在，避免通过查询数据库来判断数据是否存在。&lt;/br&gt;
布隆过滤器是由位图数组和N个哈希函数组成的，&lt;/br&gt;
他返回存在，并不一定证明就在，但返回不存在它一定不在&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis如何判断key已经过期了&#34;&gt;Redis如何判断key已经过期了？
&lt;/h3&gt;&lt;p&gt;每当我们对一个key设置了过期时间时，Redis会把key带上过期时间存储到一个过期字典中，也就是说过期字典保存了数据库中所有key的时间。&lt;/br&gt;
过期删除策略&lt;/br&gt;
1，定时删除：在设置key的过期时间时，同时创建一个定时事件，当时间到达时，由事件处理器自动执行key的删除操作。优点时对内存很友好，可以使内存尽快的释放 缺点是，如果过期key较多的话，对CPU不友好。&lt;/br&gt;
2.惰性删除：就是不主动删除过期键，每次从数据库访问key时，都检测key是否过期，如果过期删除该key。优点是每次访问时，才会检查是否过期，对CPU时间最友好。如果key已经过期的话，只要这个过期key一直没被访问，会造成内存空间浪费。&lt;/br&gt;
3.定期删除&lt;/br&gt;
每隔一段时间随机从数据库中取出一定数量的key进行检查，并删除其中过期的key。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis持久化&#34;&gt;Redis持久化
&lt;/h3&gt;&lt;p&gt;Redis如何实现数据不丢失，Redis读写都是在内存中，当Redis重启，内存数据会丢失，所以有了持久化,会把数据存储到磁盘。&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;aof日志&#34;&gt;AOF日志
&lt;/h4&gt;&lt;p&gt;每执行一条写操作命令，就把该命令以追加的方式写入到一个文件中。然后在重启的Redis的时候，先去读这个文件里的命令，并且执行它。&lt;/br&gt;
AOF写回策略&lt;/br&gt;
首先Redis执行完写操作命令后，会将命令追加到server.aof.buf缓冲区，&lt;/br&gt;
然后通过write系统调用，将aof_buf缓冲区的数据写入到AOF文件，此时数据并没有写入到硬盘，而是拷贝到了内核缓冲区page cache等待内核将数据写入硬盘&lt;/br&gt;
具体内核缓冲区的数据什么时候写入到硬盘，由内核决定。&lt;/br&gt;
AOF日志过大，会触发什么机制？&lt;/br&gt;
Redis为了避免AOF文件越写越大，提供了AOF重写机制，当AOF文件的大小超过所设定的阈值，就会启用AOF重写机制，来压缩AOF文件，重写AOF过程是由后台子进程来完成的。&lt;/br&gt;
具体流程为，在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到新的AOF文件，等到全部记录完后，就将新的AOF文件替换掉现有的AOF文件，在使用重写机制后，就会读取name最新的value，然后用一条命令记录到新的AOF文件中，最终也只需要根据这个键值对当前最新状态，用一条命令去记录键值对，如果AOF重写过程中失败了，先有的AOF文件会造成污染。&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;rdb快照&#34;&gt;RDB快照
&lt;/h4&gt;&lt;p&gt;将某一时刻的内存数据，以二进制的方式写入磁盘。然后它是Redis提供了两个命令来生成RDB文件，分别是save和bgsave，执行save命令，就会在主线程生成RDB文件，由于和执行操作命令在同一个线程，所以如果写入RDB文件的时间太长，会阻塞主线程。&lt;/br&gt;
执行bgsave命令会创建一个子进程来生产RDB文件，这样可以避免主线程的阻塞。&lt;/br&gt;
Redis的快照是全量快照，在执行快照时，都是把内存中的所有数据都记录到磁盘中。&lt;/br&gt;&lt;/p&gt;
&lt;h4 id=&#34;写时复制&#34;&gt;写时复制
&lt;/h4&gt;&lt;p&gt;在执行bgsave命令的时候，会通过fork创建子进程，此时子进程和父进程是共享同一片内存数据的，因为创建子进程的时候，会复制父进程的页表，但是页表指向物理内存还是一个。&lt;/br&gt;
如果主线程要修改共享数据的某一块数据，就会发生写时复制，于是这块数据的物理内存就会被复制一份，然后主线程在这个数据副本进行修改操作，与此同时，bgsave子进程可以继续把原来的数据写入到RDB文件。&lt;/br&gt;
所以发生了写时复制后，RDB快照保存的是原本的内存数据。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;混合持久化&#34;&gt;混合持久化
&lt;/h3&gt;&lt;p&gt;AOF文件的前半部分是RDB格式的全量数据，后半部分是AOF格式的增量数据。&lt;/br&gt;
这样做的好处就是重启Redis加载数据的时候，由于前半部分是RDB内容，这样加载的时候速度会很快，然后接下来是Redis后台子进程重写AOF期间，主线程处理的操作命令，可以使得数据更少的丢失。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;redis的主从复制&#34;&gt;Redis的主从复制
&lt;/h3&gt;&lt;p&gt;可以保证多台服务器的数据一致性，且主从服务器之间采用的时读写分离的方式&lt;/br&gt;
主服务器可以进行读写操作，当发生写操作时自动将写操作同步给从服务器，而从服务器一般是只读的，并接受主服务器同步过来写操作命令，然后执行这条命令。&lt;/br&gt;
也就是说，所有的数据修改只在主服务器上进行，然后将最新的数据同步给从服务器，这样就使得主从服务器的数据是一致的。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;哨兵模式&#34;&gt;哨兵模式
&lt;/h3&gt;&lt;p&gt;是一种Redis的一种运行模式，他专注于对Redis实例（主，从节点）运行状态的监控，并能够在主节点发生故障时通过一系列的机制实现选主及主从切换，实现故障转移，确保整个Redis系统的可用性。
哨兵节点负责三件事情，监控，选主，通知&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何判断主节点真的故障了&#34;&gt;如何判断主节点真的故障了？
&lt;/h3&gt;&lt;p&gt;哨兵每隔一秒给所有主从节点发送ping命令，当主节点收到ping命令后，会发送一个响应命令给哨兵，这样可以判断它们是否在正常运行。&lt;/br&gt;
一般会部署最少三个哨兵节点部署成哨兵集群，通过多个哨兵节点一起判断，就可以避免单个哨兵因为自身网络状况不好，然后误判主节点下线的情况。&lt;/br&gt;
选出哨兵leader&lt;/br&gt;
某个哨兵判断主节点客观下线以后，该哨兵回发起投票，需要满足两个条件，拿到半数以上的赞成票，拿到的票数同时还需要大于等于哨兵配置文件中的值&lt;/br&gt;
由哨兵leader进行主从故障转移&lt;/br&gt;
在已下线主节点（旧主节点）属下的所有从节点里面，挑出一个从节点，并将其转换为主节点&lt;/br&gt;
1.过滤掉已经离线的从节点&lt;/br&gt;
2.过滤掉历史网络连接状态不好的从节点&lt;/br&gt;
3.将剩下的从节点，进行三轮考察：优先级，复制进度，id号，在每一轮考察过程中，如果找到了一个胜出的从节点，就将其作为新主节点&lt;/br&gt;
4.让已下线主节点属下的所有从节点修改复制目标，需改伟复制新主机节点&lt;/br&gt;
5.将新主节点的IP地址和信息，通过发布订阅通知给客户端&lt;/br&gt;
6.继续监视旧主节点，当这个旧主节点重新上线时，将它设置伟新主机节点的从节点。&lt;/br&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MySQL</title>
        <link>https://ydmy71.github.io/hugo-whw/p/mysql/</link>
        <pubDate>Fri, 15 Sep 2023 17:34:23 +0800</pubDate>
        
        <guid>https://ydmy71.github.io/hugo-whw/p/mysql/</guid>
        <description>&lt;img src="https://ydmy71.github.io/hugo-whw/p/mysql/oy.jpg" alt="Featured image of post MySQL" /&gt;&lt;h2 id=&#34;mysql&#34;&gt;MySQL
&lt;/h2&gt;&lt;h3 id=&#34;char-vachar-区别&#34;&gt;char vachar 区别
&lt;/h3&gt;&lt;h4 id=&#34;一长度不同&#34;&gt;一、长度不同
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1、char类型：char类型的长度是固定的。&lt;/br &gt;&lt;/li&gt;
&lt;li&gt;2、varchar类型：varchar类型的长度是可变的。&lt;/br &gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二效率不同&#34;&gt;二、效率不同
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1、char类型：char类型每次修改的数据长度相同，效率更高。&lt;/li&gt;
&lt;li&gt;2、varchar类型：varchar类型每次修改的数据长度不同，效率更低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql有哪些锁&#34;&gt;Mysql有哪些锁？
&lt;/h3&gt;&lt;h4 id=&#34;全局锁&#34;&gt;全局锁
&lt;/h4&gt;&lt;p&gt;加上之后整个数据库只处于只读状态&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;表级锁&#34;&gt;表级锁
&lt;/h4&gt;&lt;p&gt;不会出现死锁，发生锁冲突几率高，并发低。&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;行锁&#34;&gt;行锁
&lt;/h4&gt;&lt;p&gt;会出现死锁，发生锁冲突几率低，并发高。注意的是，MySQL行锁是通过索引加载的，即是行锁是加在索引响应的行上，若对应SQL语句没有走索引则会走全表扫描，行锁将变为表锁。&lt;/br &gt;
表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;意向锁&#34;&gt;意向锁：
&lt;/h4&gt;&lt;p&gt;在使用共享锁或者独占锁之前，需要加上意向锁，意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发送冲突，意向锁之间也不会发生冲突，只会和共享锁和独占锁冲突，意向锁是为了快速判断表里是否有纪录被加锁。&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;共享锁&#34;&gt;共享锁
&lt;/h4&gt;&lt;p&gt;可以被多个线程持有，如果对数据加上共享锁后，则其他线程只能对A再加共享锁，不能加排他，只能读不能修改&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;独占锁&#34;&gt;独占锁
&lt;/h4&gt;&lt;p&gt;该锁一次只能被一个线程所持有，如果线程对数据加上排他锁后，则其他线程不能在对这个数据加任何类型的锁，获得排他锁的线程可读可修改。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql架构了解&#34;&gt;Mysql架构了解
&lt;/h3&gt;&lt;p&gt;首先是连接器，负责和客户端建立连接，获取权限，接下来是查询缓存，若之前查询过，则直接返回结果，但失效太频繁，在更新表后，缓存全没，在8.0后删除了功能，接下来是分析器，对语法进行分析符不符合规范，优化器，对语句进行优化选择索引，最后是执行器，首先判断改表有无执行权限，调用存储引擎提供接口返回给客户端&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;索引&#34;&gt;索引
&lt;/h3&gt;&lt;p&gt;索引 他是mysql存储引擎用的一种加快查询速度的数据结构 &lt;/br &gt;
优点： 可以将随机I/0 改为顺序I/0，提高查询性能，帮助服务器避免排序和临时表&lt;/br &gt;
缺点：从空间角度考虑 建立索引需要占用物理空间&lt;/br &gt;
从时间上考虑的话 维护索引比较花费时间&lt;/br &gt;
常见的索引 有 哈希索引  由哈希表实现 查找特别快 0（1）但是它范围查和顺序查不是很快全文索引 B+树索引 最为有效的索引 是因为它不用扫描全盘 他是按顺序存储的&lt;/br &gt;
B+树 他只有叶子节点存数据  非叶子节点存索引  叶子节点构造一个有序的链表 &lt;/br &gt;
高度更低 io次数更少&lt;/br &gt;
索引最好设置为NOT NULL&lt;/br &gt;
索引列存在NULL就会导致优化器在做索引选择的时候更加复制，难以优化&lt;/br &gt;
NULL值是一个没有意义的值，但是他会占用物理内存，所以会带来存储空间的问题。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;sql注入攻击&#34;&gt;SQL注入攻击
&lt;/h3&gt;&lt;p&gt;SQL注入是一种常见的网络安全威胁，攻击者通过在用户输入中插入恶意的SQL代码，从而可以执行未经授权的数据库操作。&lt;/br &gt;
用一些正则表达式在输入的时候去解决。&lt;/br &gt;
设置防火墙等。&lt;/br &gt;
MySQL为什么选择B+树来作为索引的数据结构&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mvcc&#34;&gt;MVCC
&lt;/h3&gt;&lt;p&gt;它是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。
解决以下问题&lt;/br &gt;
在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能。&lt;/br &gt;
同时还可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题。&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;解决幻读&#34;&gt;解决幻读
&lt;/h4&gt;&lt;p&gt;针对于快照读 select是通过MVCC方式解决了幻读，首先创建一个Read View 后续的查询语句利用这个Read View,通过这个就可以在undo log版本链找到事务开始时的数据，所以事务过程种每次查询的数据都是一样的。&lt;/br &gt;
针对当前读 update insert delete 是通过记录锁和间歇锁解决了幻读。&lt;/br &gt;
间歇锁就是表中有个范围（3，5）其他事务无法插入 4这条记录。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mvcc-在-rc不可重复读-和-rr可重复读-这种隔离级别下面产生readview的区别&#34;&gt;MVCC 在 RC（不可重复读） 和 RR（可重复读） 这种隔离级别下面，产生ReadView的区别?
&lt;/h3&gt;&lt;p&gt;而对于 RC 级别，其实整个过程几乎一样，唯一不同的是生成 ReadView 的时机，RR 级别只在事务开始时生成一次，之后一直使用该 ReadView。而 RC 级别则在每次 select 时，都会生成一个 ReadView。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql的在rc和rr模式下的锁&#34;&gt;MySQL的在RC和RR模式下的锁
&lt;/h3&gt;&lt;p&gt;RC没有间隙锁&lt;/p&gt;
&lt;h3 id=&#34;聚簇索引&#34;&gt;聚簇索引
&lt;/h3&gt;&lt;p&gt;一种数据存储的方式&lt;/br &gt;
与数据在一起，非聚簇索引得回表&lt;/br &gt;
聚簇索引实际上是一个或多个列的值排序的算法 特点就是数据的顺序和索引的顺序一致 一般情况下主键会默认创建聚簇索引，一张表只允许存在一个聚簇索引&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;聚簇索引和非聚簇索引的区别&#34;&gt;聚簇索引和非聚簇索引的区别
&lt;/h3&gt;&lt;p&gt;聚簇索引就是 叶子节点都是数据节点 但是非聚簇索引的叶子节点仍然是索引节点，只不过有对应数据块的指针&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;覆盖索引&#34;&gt;覆盖索引
&lt;/h4&gt;&lt;p&gt;如果一个索引包含了满足查询语句中字段与条件的数据叫做覆盖索引&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;最左前缀原则&#34;&gt;最左前缀原则：
&lt;/h4&gt;&lt;p&gt;创建 （a,b,c）相当于   a,(a,b),(a,b,c) 所以要把选择性最高的放在前面&lt;/br &gt;
用Explain来查询索引是否被使用&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;limit用法&#34;&gt;Limit用法
&lt;/h3&gt;&lt;p&gt;select * from table limit 2，5；&lt;/br &gt;
意思是查询出第三行数据包括查5个 ，也就是3-7&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;读写分离&#34;&gt;读写分离
&lt;/h3&gt;&lt;p&gt;读写分离常用代理方式来实现，代理服务器接收到读写请求后，然后转发到哪个服务器，主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作
读写分离性能高的原因在于主从服务器负责各自的读和写，极大程度缓解了锁的争用
从服务器可以用MyISAM，提升查询以及节约系统开销&lt;/br &gt;
增加冗余&lt;/p&gt;
&lt;h3 id=&#34;myisam为什么查询比innodb快&#34;&gt;MyISAM为什么查询比Innodb快
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）查询时，由于innodb支持事务，所以会有mvvc(多版本并发控制)的一个比较，这个过程会损耗性能。&lt;/li&gt;
&lt;li&gt;2）查询时，如果走了索引，而索引又不是主键索引，此时由于innodb是聚簇索引，会有一个回表的过程，即：先去非聚簇索引树（非主键索引树）中查询数据，找到数据对应的key之后，再通过key回表到聚簇索引树，最后找到需要的数据。而myisam是非聚集索引，而且叶子节点存储的是磁盘地址，所以，查询的时候查到的最后结果不是聚簇索引树的key，而是会直接去查询磁盘。&lt;/br &gt;&lt;/li&gt;
&lt;li&gt;3）锁的一个损耗，innodb锁支持行锁，在检查锁的时候不仅检查表锁，还要看行锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三范式&#34;&gt;三范式
&lt;/h3&gt;&lt;p&gt;范式是关系数据库设计的一种规范，目的是消除冗余，建立合理的数据库，从而提升数据存储和使用的性能。&lt;/p&gt;
&lt;h4 id=&#34;第一范式&#34;&gt;第一范式：
&lt;/h4&gt;&lt;p&gt;保证每个字段不可分 原子性&lt;/p&gt;
&lt;h4 id=&#34;第二范式&#34;&gt;第二范式：
&lt;/h4&gt;&lt;p&gt;保证 每个字段都完全依赖于主键 不能只依赖于一般分， 唯一性和依赖性&lt;/p&gt;
&lt;h4 id=&#34;第三范式&#34;&gt;第三范式：
&lt;/h4&gt;&lt;p&gt;没有传递依赖  任何非主属性不依赖于其他非主属性&lt;/p&gt;
&lt;h3 id=&#34;事务&#34;&gt;事务
&lt;/h3&gt;&lt;p&gt;start transaction&lt;/br &gt;
提交事务&lt;/br &gt;
commit&lt;/br &gt;
保存回滚点&lt;/br &gt;
savepoint&lt;/br &gt;
回滚事务&lt;/br &gt;
rollback[ to 回滚点名]&lt;/br &gt;
启用或关闭自动提交模式&lt;/br &gt;
set autocommited=1;启用&lt;/br &gt;
set autocommited=0 关闭&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;四个特性&#34;&gt;四个特性：
&lt;/h4&gt;&lt;h5 id=&#34;原子性&#34;&gt;原子性
&lt;/h5&gt;&lt;p&gt;要么全部成功 要么全部失败&lt;/p&gt;
&lt;h5 id=&#34;一致性&#34;&gt;一致性
&lt;/h5&gt;&lt;p&gt;数据库总会从一个状态转换成另外一个状态&lt;/p&gt;
&lt;h5 id=&#34;隔离性&#34;&gt;隔离性
&lt;/h5&gt;&lt;p&gt;一个事务所做的修改在提交前 堆其他事务是不可见的&lt;/p&gt;
&lt;h5 id=&#34;持久性&#34;&gt;持久性
&lt;/h5&gt;&lt;p&gt;事务一旦提交 其修改会持久的保存到数据库中，放到缓存池中&lt;/p&gt;
&lt;h3 id=&#34;并行事务所带来的问题&#34;&gt;并行事务所带来的问题
&lt;/h3&gt;&lt;h4 id=&#34;脏读&#34;&gt;脏读：
&lt;/h4&gt;&lt;p&gt;一个事务读到未提交的数据叫脏读&lt;/p&gt;
&lt;h4 id=&#34;不可重复读&#34;&gt;不可重复读
&lt;/h4&gt;&lt;p&gt;在一个事务内读取同一条记录 前后结果不一样&lt;/p&gt;
&lt;h4 id=&#34;幻读&#34;&gt;幻读：
&lt;/h4&gt;&lt;p&gt;在一个事务内按相同条件多次查询 前后结果集的数量不同就叫做幻读&lt;/p&gt;
&lt;h3 id=&#34;隔离级别&#34;&gt;隔离级别
&lt;/h3&gt;&lt;h4 id=&#34;未提交读&#34;&gt;未提交读：
&lt;/h4&gt;&lt;p&gt;没有提交也能被其他事务看到&lt;/p&gt;
&lt;h4 id=&#34;提交读&#34;&gt;提交读
&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; 提交后才能被其他事务所看到
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;可重复读&#34;&gt;可重复读
&lt;/h4&gt;&lt;p&gt;mysql默认隔离级别  事务在执行期间看到的数据始终与其启动时看到的数据保持一致。这种隔离级别确保同一事务的多个实例在并发读取数据时，会看到同样的数据行&lt;/p&gt;
&lt;h4 id=&#34;可串行化&#34;&gt;可串行化
&lt;/h4&gt;&lt;p&gt;强制事务串行执行 避免幻读问题 每一行数据加锁&lt;/p&gt;
&lt;h3 id=&#34;实现隔离级别的方法&#34;&gt;实现隔离级别的方法
&lt;/h3&gt;&lt;h4 id=&#34;加锁&#34;&gt;加锁
&lt;/h4&gt;&lt;p&gt;对数据前对其加锁 阻止其他事务对数据进行修改&lt;/p&gt;
&lt;h4 id=&#34;快照&#34;&gt;快照
&lt;/h4&gt;&lt;p&gt;读取之前的快照 可重复读可以在读取事务开始的快照去解决不可重复读问题&lt;/p&gt;
&lt;h3 id=&#34;什么sql语句会加行级锁&#34;&gt;什么SQL语句会加行级锁？
&lt;/h3&gt;&lt;p&gt;如果要在查询时对记录加行级锁，叫做锁定读&lt;/br &gt;
还有update和delete会加行级锁，且锁的类型都是独占锁。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql用长连接有什么好处么&#34;&gt;Mysql用长连接有什么好处么？
&lt;/h3&gt;&lt;p&gt;在长连接模式下，长连接是指在应用程序与数据库建立一次连接后，保持该连接的状态，直到显示关闭连接，&lt;/br &gt;
短链接，即每次数据库操作都建立新的连接并在操作完成后立即关闭连接。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql日志&#34;&gt;MySQL日志
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;undo log：回滚日志，实现了事务中的原子性，主要用于事务回滚和MVCC&lt;/li&gt;
&lt;li&gt;redo log：重做日志 时innodb引擎生成的日志，实现了事务的持久性，主要用于故障恢复&lt;/li&gt;
&lt;li&gt;binlog归档日志：是Server层生成的日志，主要用于数据备份和主从复制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么要undo-log&#34;&gt;为什么要undo log？
&lt;/h3&gt;&lt;p&gt;我们在每次执行事务过程种，都要记录下回滚需要的信息到一个日志里，如果Mysql崩溃后，就不用但系无法回滚到事务之前的数据，我们可以通过这个日志回滚到事务之前的数据。&lt;/p&gt;
&lt;h3 id=&#34;为什么需要redo-log&#34;&gt;为什么需要redo log？
&lt;/h3&gt;&lt;p&gt;WAL技术指的是，MYSQL的写操作并不是立刻写在磁盘上的，而是先写日志，在合适的时间在写道磁盘上。&lt;/br &gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redo log是物理日志，记录了某个数据页做了什么修改，每当执行一个事务就会产生这样的一条或者多条物理日志。&lt;/li&gt;
&lt;li&gt;redo log记录了此次事务完成后的数据状态，记录的是更新之后的值&lt;/li&gt;
&lt;li&gt;undo log记录了此次事务开始前的数据状态，记录的是更新之前的值&lt;/li&gt;
&lt;li&gt;redo log的方式使用了追加操作，所有磁盘操作是顺序写，写入数据需要先找到写入位置，然后才写到磁盘，所以磁盘操作作是随机写。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么需要binlog&#34;&gt;为什么需要binlog？
&lt;/h3&gt;&lt;p&gt;binlog文件是记录了所以数据表结构变更和表数据修改的日志，不会记录查询类的操作，比如SELECT和SHOW操作&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;redo-log和binlog有什么区别&#34;&gt;redo log和binlog有什么区别？
&lt;/h3&gt;&lt;p&gt;binlog是Mysql的Server层实现的日志，所有存储引擎都可以使用。&lt;/br &gt;
redo log是Innodb存储引擎实现的日志；&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;主从复制&#34;&gt;主从复制
&lt;/h3&gt;&lt;h4 id=&#34;mysql集群的主从复制过程梳理成三个阶段&#34;&gt;MySQL集群的主从复制过程梳理成三个阶段
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;写入Binlog：主库写binlog日志，提交事务，并更新本地存储数据&lt;/li&gt;
&lt;li&gt;同步binlog：把binog复制到所有从库上，每个从库把binlog写到暂存日志种&lt;/li&gt;
&lt;li&gt;回放binlog回放binlog，并更新存储引擎中的数据&lt;/li&gt;
&lt;li&gt;首先主库收到客户端提交事务的请求之后，会先写入binlog，在提交事务，更新存储引擎中的数据，事务提交完成后，从库会创建一个专门的I/O线程，来接收binlog日志，再把binlog信息写入relay log的中继日志里，然后从库创建一个用于回放binlog的线程，去读relay log中继日志，然后回访binlog更新存储引擎中的数据，最终实现主从的数据一致性。完成之后，可以只在主库中写数据，读数据用从库，这样即使写请求会锁表或者锁记录，也不会印象读请求的执行。&lt;/br &gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据库和缓存如何保证一致性&#34;&gt;数据库和缓存如何保证一致性？
&lt;/h4&gt;&lt;p&gt;无论是先更新数据库还是在更新缓存，这两个方案都会存在并发问题，当两个请求并发更新同一条数据的时候，可能会出现缓存和数据库数据不一致的现象。&lt;/br &gt;
引下来先更新数据库还是先删除缓存？&lt;/br &gt;
不更新缓存，而是删除缓存中的数据，然后读取数据时，发现缓存中没了数据之后，在从数据库中读取数据，更新到缓存中。&lt;/br &gt;
分为写策略和读策略&lt;/br &gt;&lt;/p&gt;
&lt;h5 id=&#34;写策略&#34;&gt;写策略
&lt;/h5&gt;&lt;p&gt;分为
先更新数据库中的数据 在删除缓存中的数据&lt;/br &gt;
是因为缓存的写入通常要远远快于数据库的写入。&lt;/br &gt;
先删除缓存中的数据 在更新数据库&lt;/br &gt;&lt;/p&gt;
&lt;h5 id=&#34;读策略&#34;&gt;读策略
&lt;/h5&gt;&lt;p&gt;如果读取的数据有缓存，则直接返回数据&lt;/br &gt;
如果读取的数据没有命中缓存，则从数据库读数据，然后将数据写入到缓存，并返回给用户。&lt;/br &gt;
如何保证，先更新数据库，在删除缓存这两个操作能执行成功？&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;如何保证两个操作都能执行成功&#34;&gt;如何保证两个操作都能执行成功？
&lt;/h3&gt;&lt;p&gt;消息队列重试机制&lt;/br &gt;
引入消息队列，将第二个要操作的数据加入到消息队列，由消费者来操作数据&lt;/br &gt;
如果应用删除缓存失败，可以从消息队列中重新读取数据，然后在次删除缓存&lt;/br &gt;
如果删除缓存成功，就要把数据从消息队列中移除，避免重复操作，否则就继续重试。&lt;/br &gt;&lt;/p&gt;
&lt;h3 id=&#34;分库分表&#34;&gt;分库分表
&lt;/h3&gt;&lt;p&gt;分库分表是一种数据库设计和管理中的一种策略，主要解决随着数据量和并发访问量的增加而带来的性能，和扩展性问题。&lt;/p&gt;
&lt;h4 id=&#34;分库&#34;&gt;分库：
&lt;/h4&gt;&lt;p&gt;将数据按照某种规则，分散到多个独立的数据库中，&lt;/p&gt;
&lt;h4 id=&#34;分表&#34;&gt;分表：
&lt;/h4&gt;&lt;p&gt;将一个大表的数据按照某种规则，分散到多个小表中，每个小表称为一个分片或分表&lt;/br &gt;
分库分表通过将数据，按照某种策略分配到多个数据库节点，或表中，提高了查询和写入性能，增强系统的可扩展性和容错能力。&lt;/br &gt;&lt;/p&gt;
&lt;h4 id=&#34;分为水平拆分和垂直拆分&#34;&gt;分为水平拆分和垂直拆分
&lt;/h4&gt;&lt;p&gt;垂直拆分，就是把字段分开&lt;/br &gt;
水平拆分，就是把记录分开&lt;/br &gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
